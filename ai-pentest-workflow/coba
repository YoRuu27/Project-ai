import React, { useState, useEffect } from 'react';
import { Play, Shield, Target, FileText, Activity, Plus, Settings, Zap, Lock, Terminal, Users, Clock } from 'lucide-react';

const App = () => {
  const [activeNodes, setActiveNodes] = useState(new Set());
  const [isRunning, setIsRunning] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  const nodes = [
    { id: 'start', type: 'trigger', title: 'Target Discovery', icon: Target, x: 100, y: 200, color: 'from-green-400 to-green-600' },
    { id: 'nmap', type: 'action', title: 'Nmap Scan', icon: Terminal, x: 300, y: 150, color: 'from-blue-400 to-blue-600' },
    { id: 'nuclei', type: 'action', title: 'Nuclei Vuln Scan', icon: Zap, x: 300, y: 250, color: 'from-purple-400 to-purple-600' },
    { id: 'analysis', type: 'process', title: 'AI Analysis', icon: Activity, x: 500, y: 200, color: 'from-orange-400 to-orange-600' },
    { id: 'report', type: 'output', title: 'Generate Report', icon: FileText, x: 700, y: 200, color: 'from-red-400 to-red-600' }
  ];

  const connections = [
    { from: 'start', to: 'nmap' },
    { from: 'start', to: 'nuclei' },
    { from: 'nmap', to: 'analysis' },
    { from: 'nuclei', to: 'analysis' },
    { from: 'analysis', to: 'report' }
  ];

  const runWorkflow = () => {
    setIsRunning(true);
    setActiveNodes(new Set());
    
    const sequence = ['start', 'nmap', 'nuclei', 'analysis', 'report'];
    
    sequence.forEach((nodeId, index) => {
      setTimeout(() => {
        setActiveNodes(prev => new Set([...prev, nodeId]));
        if (index === sequence.length - 1) {
          setTimeout(() => setIsRunning(false), 1000);
        }
      }, index * 1500);
    });
  };

  const stats = [
    { label: 'Active Scans', value: '3', icon: Activity },
    { label: 'Vulnerabilities', value: '12', icon: Shield },
    { label: 'Targets', value: '8', icon: Target },
    { label: 'Reports', value: '24', icon: FileText }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white overflow-hidden">
      {/* Animated background */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/2 -left-1/2 w-full h-full bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-full animate-spin" style={{ animationDuration: '20s' }}></div>
        <div className="absolute -bottom-1/2 -right-1/2 w-full h-full bg-gradient-to-r from-green-500/10 to-blue-500/10 rounded-full animate-spin" style={{ animationDuration: '25s', animationDirection: 'reverse' }}></div>
      </div>

      {/* Header */}
      <header className="relative z-10 border-b border-slate-700/50 backdrop-blur-sm bg-slate-900/80">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
                  <Shield className="h-6 w-6" />
                </div>
                <div>
                  <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                    AI Pentest Workflow
                  </h1>
                  <p className="text-slate-400 text-sm">Security Assessment Dashboard</p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <div className="text-right text-sm text-slate-400">
                <div>{currentTime.toLocaleDateString('id-ID')}</div>
                <div className="font-mono">{currentTime.toLocaleTimeString('id-ID')}</div>
              </div>
              <button className="p-2 hover:bg-slate-700 rounded-lg transition-colors">
                <Settings className="h-5 w-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="relative z-10 container mx-auto px-6 py-8">
        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {stats.map((stat, index) => (
            <div key={index} className="bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 rounded-xl p-6 hover:bg-slate-800/70 transition-all duration-300 group">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-slate-400 text-sm">{stat.label}</p>
                  <p className="text-2xl font-bold text-white">{stat.value}</p>
                </div>
                <stat.icon className="h-8 w-8 text-blue-400 group-hover:text-blue-300 transition-colors" />
              </div>
            </div>
          ))}
        </div>

        {/* Main Workflow Area */}
        <div className="bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 rounded-2xl p-8 mb-8">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-2xl font-bold text-white mb-2">Security Assessment Workflow</h2>
              <p className="text-slate-400">Automated penetration testing pipeline</p>
            </div>
            <div className="flex space-x-4">
              <button
                onClick={runWorkflow}
                disabled={isRunning}
                className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 disabled:from-gray-600 disabled:to-gray-700 rounded-lg font-semibold transition-all duration-200 transform hover:scale-105 disabled:scale-100"
              >
                <Play className="h-5 w-5" />
                <span>{isRunning ? 'Running...' : 'Start Workflow'}</span>
              </button>
              <button className="flex items-center space-x-2 px-6 py-3 bg-slate-700 hover:bg-slate-600 rounded-lg font-semibold transition-colors">
                <Plus className="h-5 w-5" />
                <span>Add Node</span>
              </button>
            </div>
          </div>

          {/* Workflow Canvas */}
          <div className="relative bg-slate-900/50 rounded-xl p-8 min-h-[400px] overflow-hidden">
            {/* Grid Pattern */}
            <div className="absolute inset-0 opacity-20">
              <div className="grid grid-cols-12 grid-rows-8 h-full">
                {Array.from({ length: 96 }).map((_, i) => (
                  <div key={i} className="border-r border-b border-slate-700/30"></div>
                ))}
              </div>
            </div>

            {/* Connection Lines */}
            <svg className="absolute inset-0 w-full h-full pointer-events-none">
              {connections.map((conn, index) => {
                const fromNode = nodes.find(n => n.id === conn.from);
                const toNode = nodes.find(n => n.id === conn.to);
                if (!fromNode || !toNode) return null;

                const isActive = activeNodes.has(conn.from) && activeNodes.has(conn.to);
                
                return (
                  <g key={index}>
                    <defs>
                      <linearGradient id={`gradient-${index}`} x1="0%" y1="0%" x2="100%" y2="0%">
                        <stop offset="0%" style={{ stopColor: isActive ? '#3b82f6' : '#475569', stopOpacity: 1 }} />
                        <stop offset="100%" style={{ stopColor: isActive ? '#8b5cf6' : '#475569', stopOpacity: 1 }} />
                      </linearGradient>
                    </defs>
                    <line
                      x1={fromNode.x + 60}
                      y1={fromNode.y + 30}
                      x2={toNode.x}
                      y2={toNode.y + 30}
                      stroke={`url(#gradient-${index})`}
                      strokeWidth={isActive ? "3" : "2"}
                      className="transition-all duration-500"
                    />
                    {isActive && (
                      <circle r="4" fill="#3b82f6">
                        <animateMotion dur="2s" repeatCount="indefinite">
                          <mpath href={`#path-${index}`} />
                        </animateMotion>
                      </circle>
                    )}
                    <path id={`path-${index}`} d={`M${fromNode.x + 60},${fromNode.y + 30} L${toNode.x},${toNode.y + 30}`} style={{ display: 'none' }} />
                  </g>
                );
              })}
            </svg>

            {/* Workflow Nodes */}
            {nodes.map((node) => {
              const isActive = activeNodes.has(node.id);
              const Icon = node.icon;
              
              return (
                <div
                  key={node.id}
                  className={`absolute transform transition-all duration-500 ${
                    isActive ? 'scale-110 shadow-2xl' : 'hover:scale-105'
                  }`}
                  style={{ left: node.x, top: node.y }}
                >
                  <div className={`relative bg-gradient-to-br ${node.color} p-4 rounded-xl shadow-lg border-2 ${
                    isActive ? 'border-white animate-pulse' : 'border-transparent'
                  }`}>
                    <div className="flex items-center space-x-3">
                      <Icon className="h-6 w-6 text-white" />
                      <div>
                        <h4 className="font-semibold text-white text-sm">{node.title}</h4>
                        <p className="text-xs text-white/80 capitalize">{node.type}</p>
                      </div>
                    </div>
                    {isActive && (
                      <div className="absolute -inset-1 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl blur opacity-30 animate-pulse"></div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Recent Activity */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 rounded-xl p-6">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center space-x-2">
              <Clock className="h-5 w-5 text-blue-400" />
              <span>Recent Activities</span>
            </h3>
            <div className="space-y-4">
              {[
                { action: 'Nmap scan completed', target: '192.168.1.0/24', time: '2 minutes ago', status: 'success' },
                { action: 'Nuclei vulnerability scan', target: 'web.example.com', time: '5 minutes ago', status: 'running' },
                { action: 'Report generated', target: 'Internal Network', time: '10 minutes ago', status: 'success' }
              ].map((activity, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-slate-700/30 rounded-lg">
                  <div className="flex items-center space-x-3">
                    <div className={`w-2 h-2 rounded-full ${
                      activity.status === 'success' ? 'bg-green-400' : 
                      activity.status === 'running' ? 'bg-yellow-400 animate-pulse' : 'bg-red-400'
                    }`}></div>
                    <div>
                      <p className="text-white text-sm font-medium">{activity.action}</p>
                      <p className="text-slate-400 text-xs">{activity.target}</p>
                    </div>
                  </div>
                  <span className="text-slate-400 text-xs">{activity.time}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-slate-800/50 backdrop-blur-sm border border-slate-700/50 rounded-xl p-6">
            <h3 className="text-xl font-bold text-white mb-4 flex items-center space-x-2">
              <Users className="h-5 w-5 text-purple-400" />
              <span>Quick Actions</span>
            </h3>
            <div className="grid grid-cols-2 gap-4">
              {[
                { title: 'New Target', icon: Target, color: 'from-green-500 to-green-600' },
                { title: 'Custom Scan', icon: Terminal, color: 'from-blue-500 to-blue-600' },
                { title: 'View Reports', icon: FileText, color: 'from-purple-500 to-purple-600' },
                { title: 'Settings', icon: Settings, color: 'from-orange-500 to-orange-600' }
              ].map((action, index) => (
                <button
                  key={index}
                  className={`flex flex-col items-center justify-center p-4 bg-gradient-to-br ${action.color} rounded-lg hover:shadow-lg transform hover:scale-105 transition-all duration-200`}
                >
                  <action.icon className="h-6 w-6 text-white mb-2" />
                  <span className="text-white text-sm font-medium">{action.title}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;