import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Play, Shield, Target, FileText, Activity, Plus, Settings, Zap, Lock, Terminal, Users, Clock } from 'lucide-react';
import './App.css';

const App = () => {
  const [activeNodes, setActiveNodes] = useState(new Set());
  const [isRunning, setIsRunning] = useState(false);
  const [currentTime, setCurrentTime] = useState(new Date());

  // Update time every second
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  // Workflow nodes configuration
  const nodes = [
    { 
      id: 'start', 
      type: 'trigger', 
      title: 'Target Discovery', 
      icon: Target, 
      x: 100, 
      y: 200, 
      className: 'node-green' 
    },
    { 
      id: 'nmap', 
      type: 'action', 
      title: 'Nmap Scan', 
      icon: Terminal, 
      x: 300, 
      y: 150, 
      className: 'node-blue' 
    },
    { 
      id: 'nuclei', 
      type: 'action', 
      title: 'Nuclei Vuln Scan', 
      icon: Zap, 
      x: 300, 
      y: 250, 
      className: 'node-purple' 
    },
    { 
      id: 'analysis', 
      type: 'process', 
      title: 'AI Analysis', 
      icon: Activity, 
      x: 500, 
      y: 200, 
      className: 'node-orange' 
    },
    { 
      id: 'report', 
      type: 'output', 
      title: 'Generate Report', 
      icon: FileText, 
      x: 700, 
      y: 200, 
      className: 'node-red' 
    }
  ];

  // Workflow connections
  const connections = [
    { from: 'start', to: 'nmap' },
    { from: 'start', to: 'nuclei' },
    { from: 'nmap', to: 'analysis' },
    { from: 'nuclei', to: 'analysis' },
    { from: 'analysis', to: 'report' }
  ];

  // Statistics data
  const stats = [
    { label: 'Active Scans', value: '3', icon: Activity },
    { label: 'Vulnerabilities', value: '12', icon: Shield },
    { label: 'Targets', value: '8', icon: Target },
    { label: 'Reports', value: '24', icon: FileText }
  ];

  // Recent activities data
  const activities = [
    { 
      action: 'Nmap scan completed', 
      target: '192.168.1.0/24', 
      time: '2 minutes ago', 
      status: 'success' 
    },
    { 
      action: 'Nuclei vulnerability scan', 
      target: 'web.example.com', 
      time: '5 minutes ago', 
      status: 'running' 
    },
    { 
      action: 'Report generated', 
      target: 'Internal Network', 
      time: '10 minutes ago', 
      status: 'success' 
    }
  ];

  // Quick actions data
  const quickActions = [
    { title: 'New Target', icon: Target, className: 'action-green' },
    { title: 'Custom Scan', icon: Terminal, className: 'action-blue' },
    { title: 'View Reports', icon: FileText, className: 'action-purple' },
    { title: 'Settings', icon: Settings, className: 'action-orange' }
  ];

  // Fungsi untuk kirim perintah ke backend
  const runCommand = async (command) => {
    try {
      const res = await axios.post("http://localhost:5000/run-command", { command });
      alert("Output:\n" + res.data.output);
    } catch (error) {
      alert("Error:\n" + (error.response?.data?.error || error.message));
    }
  };

  // Ubah fungsi runWorkflow
  const runWorkflow = async () => {
    if (isRunning) return;

    setIsRunning(true);
    setActiveNodes(new Set());

    const sequence = [
      { id: 'start', cmd: 'echo Discovering target...' },
      { id: 'nmap', cmd: 'nmap -F 127.0.0.1' },
      { id: 'nuclei', cmd: 'echo Simulate nuclei scan...' },
      { id: 'analysis', cmd: 'echo Analyzing results with AI model...' },
      { id: 'report', cmd: 'echo Generating report...' }
    ];

    for (let i = 0; i < sequence.length; i++) {
      const step = sequence[i];
      setActiveNodes(prev => new Set([...prev, step.id]));
      await runCommand(step.cmd);
      await new Promise(resolve => setTimeout(resolve, 1500));
    }

    setIsRunning(false);
  };

  // Render workflow connections
  const renderConnections = () => {
    return connections.map((conn, index) => {
      const fromNode = nodes.find(n => n.id === conn.from);
      const toNode = nodes.find(n => n.id === conn.to);
      if (!fromNode || !toNode) return null;

      const isActive = activeNodes.has(conn.from) && activeNodes.has(conn.to);
      
      return (
        <g key={index}>
          <defs>
            <linearGradient id={`gradient-${index}`} x1="0%" y1="0%" x2="100%" y2="0%">
              <stop 
                offset="0%" 
                style={{ 
                  stopColor: isActive ? '#3b82f6' : '#475569', 
                  stopOpacity: 1 
                }} 
              />
              <stop 
                offset="100%" 
                style={{ 
                  stopColor: isActive ? '#8b5cf6' : '#475569', 
                  stopOpacity: 1 
                }} 
              />
            </linearGradient>
          </defs>
          <line
            x1={fromNode.x + 60}
            y1={fromNode.y + 30}
            x2={toNode.x}
            y2={toNode.y + 30}
            stroke={`url(#gradient-${index})`}
            strokeWidth={isActive ? "3" : "2"}
            style={{ transition: 'all 0.5s ease' }}
          />
          {isActive && (
            <circle r="4" fill="#3b82f6">
              <animateMotion dur="2s" repeatCount="indefinite">
                <mpath href={`#path-${index}`} />
              </animateMotion>
            </circle>
          )}
          <path 
            id={`path-${index}`} 
            d={`M${fromNode.x + 60},${fromNode.y + 30} L${toNode.x},${toNode.y + 30}`} 
            style={{ display: 'none' }} 
          />
        </g>
      );
    });
  };

  // Render workflow nodes
  const renderNodes = () => {
    return nodes.map((node) => {
      const isActive = activeNodes.has(node.id);
      const Icon = node.icon;
      
      return (
        <div
          key={node.id}
          className={`workflow-node ${isActive ? 'active' : ''}`}
          style={{ left: node.x, top: node.y }}
        >
          <div className={`node-content ${node.className} ${isActive ? 'active' : ''}`}>
            <div className="node-inner">
              <Icon className="node-icon" />
              <div className="node-text">
                <h4>{node.title}</h4>
                <p>{node.type}</p>
              </div>
            </div>
            {isActive && <div className="node-glow"></div>}
          </div>
        </div>
      );
    });
  };

  return (
    <div className="app-container">
      {/* Animated Background */}
      <div className="animated-background">
        <div className="bg-sphere-1"></div>
        <div className="bg-sphere-2"></div>
      </div>

      {/* Header */}
      <header className="app-header">
        <div className="header-container">
          <div className="header-brand">
            <div className="brand-logo">
              <Shield />
            </div>
            <div className="brand-text">
              <h1>AI Pentest Workflow</h1>
              <p>Security Assessment Dashboard</p>
            </div>
          </div>
          <div className="header-actions">
            <div className="time-display">
              <div>{currentTime.toLocaleDateString('id-ID')}</div>
              <div className="time">{currentTime.toLocaleTimeString('id-ID')}</div>
            </div>
            <button className="settings-btn">
              <Settings />
            </button>
          </div>
        </div>
      </header>

      <div className="main-content">
        {/* Stats Grid */}
        <div className="stats-grid">
          {stats.map((stat, index) => (
            <div key={index} className="stat-card">
              <div className="stat-content">
                <div className="stat-text">
                  <p>{stat.label}</p>
                  <p>{stat.value}</p>
                </div>
                <stat.icon className="stat-icon" />
              </div>
            </div>
          ))}
        </div>

        {/* Main Workflow Area */}
        <div className="workflow-section">
          <div className="workflow-header">
            <div className="workflow-title">
              <h2>Security Assessment Workflow</h2>
              <p>Automated penetration testing pipeline</p>
            </div>
            <div className="workflow-actions">
              <button
                onClick={runWorkflow}
                disabled={isRunning}
                className="btn-primary"
              >
                <Play />
                <span>{isRunning ? 'Running...' : 'Start Workflow'}</span>
              </button>
              <button className="btn-secondary">
                <Plus />
                <span>Add Node</span>
              </button>
            </div>
          </div>

          {/* Workflow Canvas */}
          <div className="workflow-canvas">
            {/* Grid Pattern */}
            <div className="grid-pattern">
              {Array.from({ length: 96 }).map((_, i) => (
                <div key={i} className="grid-cell"></div>
              ))}
            </div>

            {/* Connection Lines */}
            <svg className="workflow-svg">
              {renderConnections()}
            </svg>

            {/* Workflow Nodes */}
            {renderNodes()}
          </div>
        </div>

        {/* Bottom Grid */}
        <div className="bottom-grid">
          {/* Recent Activity */}
          <div className="activity-panel">
            <div className="panel-header">
              <Clock className="panel-icon" />
              <h3>Recent Activities</h3>
            </div>
            <div className="activity-list">
              {activities.map((activity, index) => (
                <div key={index} className="activity-item">
                  <div className="activity-content">
                    <div className={`activity-status status-${activity.status}`}></div>
                    <div className="activity-text">
                      <p>{activity.action}</p>
                      <p>{activity.target}</p>
                    </div>
                  </div>
                  <span className="activity-time">{activity.time}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Quick Actions */}
          <div className="activity-panel">
            <div className="panel-header">
              <Users className="panel-icon" />
              <h3>Quick Actions</h3>
            </div>
            <div className="actions-grid">
              {quickActions.map((action, index) => (
                <button
                  key={index}
                  className={`action-btn ${action.className}`}
                >
                  <action.icon />
                  <span>{action.title}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;